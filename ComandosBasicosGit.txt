LISTA DE COMANDOS TOMADOS DEL CURSO DE GIT Y GITHUB DE PLATZI 
02/12/2022


*********//Comandos básicos//**********

cd   -> change directory (Cambiar de directorio).
mkdir-> make directory (Crear carpetas).
ls   -> list (Ver el listado de las carpetas dentro del directorio).
clear-> Limpiar la consola o con ctrl + l.
pwd  -> print working directory (imprime el nombre del directorio actual).
touch-> Crea archivos vacíos. 
code -> Abre la consola del editor de texto.
code nombreArchivo.txt -> Abre el archivo especificado. 
cat  -> Ver la información del archivo especifico.
history -> Ver el historial de comandos. 
rm   -> remove (Borra el archivo).
rm --help -> te muestra más comandos. 

*********//Comandos GIT//**********
-git init -> inicializa un repositorio en GIT (BD donde se guardará toda la info).
-git add nombreArchivo.txt -> Agrega los archivos específicos en el staging (repositorio).
-git add . -> Añade todos los archivos en el staging.
-git commit -m"mesaje"-> Buena práctica agregar un mensaje cada que se hace un commit, envía los archivos "finales" del staging al master
-git rm nombreArchivo.txt -> remueve los archivos. 
-git rm --cached nombreArchivo.txt -> Remueves el archivo (quitarle el add).
(si le das rm --cached tienes que volver a agregar el git add .)
-git rm --force: Elimina los archivos de Git y del disco duro.
-git commit -m"Buena practica agregar mensajes a tus cambios".
-git diff ->Ver la diferencia entre staging y el directorio actual.
-git log --stat ->Muestra los cambios específicos que se le realizo a cada archivo. 
-git checkout ID nombreArchivo.txt-> Ver un archivo como estaba anteriormente 
---Notas importantes---
Cuando se ejecuta el comando checkout y especificando a que ID se quiere regresar
se muestra temporalmente como estaba el archivo anteriormente y si se da GIT COMMIT -m
se pierde todos los cambios que se tenían actualmente y así regresando a sus estatus anteriores
(se pierden todos los cambios realizados)
y con: 
-git checkout master nombrearchivo.txt-> se mantiene el archivo con sus últimos cambios realizados.
-git reset ID --soft: Borramos todo el historial y los registros de Git pero guardamos los cambios que tengamos en Staging, así podemos aplicar las últimas actualizaciones a un nuevo commit.
-git reset ID --hard: Borra todo. Toda la información de los commits y del área de staging se borra del historial.
-git commit -am"" ->Realiza el git add de los cambios (solo funciona una vez realizado el git add anteriormente).


---------------------------------------------------------------------------
COMANDOS PARA TRABAJO REMOTO 
---------------------------------------------------------------------------
-git clone url_del_servidor_remoto : Permite descargar los archivos de la última versión
de la rama principal y todo el historial de cambios en la carpeta .git
-git push: Luego de hacer gi add y git commit debemos ejecutar este comando para mandar los cambios al servidor remoto.
-git fetch: Lo usamos para traer actualizaciones des servidor remoto y guardarlas en nuestro repositorio local.
- git merge: Combina los últimos cambios del servidor remoto y nuestro directorio de trabajo. 
-git pull: Copia repositorio la BD en el repositorio (es lo mismo de que fetch y merge).
---------------------------------------------------------------------------
CREAR RAMAS
---------------------------------------------------------------------------
-Se crea en la rama en master
-git show -> Puedo ver en que cabecera estoy.
-git branch nombreCabecera ->Crear una rama (ver nombre de ramas).
-git checkout nombreCabecera->cambiar de rama.
---------------
Es necesario hacer el add y commit en cada rama o si no se perderá el cambio 
Antes de cambiar de rama.

Se debe hacer el marge en la rama "Master"
---------------
-git merge NombreDeLaOtraRama(es un commit, lleva un msj)""

----------------------------GitHub
git remote add origin DireccionDeGitHub ->Crear un origen remoto de nuestros archivos.(iniciamos sesión)
git remote ->vemos que exite origin.
git remote -v (verbal)-> MUestra origin para hacer fetch(traer) y push(enviar).
git origin push master ->Enviar el origen de la rama master.(enviar nuestros archivos a github)
git pull origin master --allow-unrelated-histories->fusionar con lo que se tiene en la rama local.
(Damos otra vez estos comandos para ver los commits en la consola de git)
-------------------------Comandos conexion con GitHub
***Crear llaves públicas y provadas en Git***
ssh-keygen -t rsa -b 4096 -C"correoGitHub@gamil.com"->Key generation SSH algoritmo que se usa(-t rsa) complejidad y correo al que se va a conectar la llave.
**Pide donde guardar la llave ?***enter y pide passphaser
**Se crea la llave privada y puplca en la carpeta .ssh/..
**Levar la llave publica a github
**Agregar la llave al entorno

**Revisar qeu las llaves esten corriendo cuando se conecte a github
eval $(ssh-agent -s) ->encender el servidor de llaves SSH (agregar una llave a git bash)
***da un núm*** 
agent 386(procesador)(significa que corren las llaves)
***Agregar la llave al servidor (revisar donde se agrego)
ssh -add ~/.ssh/id_rsa(ruta donde guardaste tu llave privada)
******* cd ~/CursoGit2023/******
ls -al -> ver llaves
********Subir un cambio a GitHub*******
Antes de hacer un commit es traer la ultima versión del servidor
git pull (yes)

git pull origin master-> (traer del origen y la vamos a fusionar con la rama master) 
(Buena practica)

git -commit -am"msj"
***Enviar el cambio***
git pull origin master
git push origin mastes ->Enviar los cambios 

************Comandos para agregar ALIAS & TAGS
-git log-> historial
-git log --all ->historial detallado
-git log --all --graph->Muestra el brach de las ramas
-git log --all --graph --decorate --oneline->Muestra el historial comprimido
************Agregar un ALIAS
-alias NombreAlias ="comando" 
ejemplo 
-alias arbolito  = "git log --all --graph --decorate --oneline"
Y ejecutas solo con:
-arbolito->te muestra la información del comando
************Crear TAGS
-git tag -a V.01 -m"Este es el primer tag" hash
-git tag ->Muestra los tags
-git show-ref --tags->Muestra la info mas detallada
***Subir los tag
Una buena practica es actualizar nuestro ambiente(ultima versión)
-git pull origin master
-git push origin master --tags -> Enviar los tags
***Elimiar TAGS
-git tag->Muestra los tags 
-git tag -d NombreTag ->Eliminar el tag
-git push origin :refs/tags/NombreTag ->Eliminar tag


*********//Comandos configurar GIT//**********
-git config -> Ver todas las confiuraciones de git
-git config --list 
git config --list --show-origin -> Ver en dende están las config guardadas. 
git config --global user.name "Cyn Rod" ->Crear un usuario. 
git config --global user.name "cyn_adri_rod_mtz@hotmil.com" añadir correo.
********************************************************
git clone (pegar la url de git)

													
